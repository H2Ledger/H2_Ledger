/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace GHCToken {
  export type BatchStruct = {
    batchId: BigNumberish;
    tokenType: BigNumberish;
    quantity: BigNumberish;
    issuanceDate: BigNumberish;
    status: BytesLike;
    issuer: AddressLike;
    exists: boolean;
  };

  export type BatchStructOutput = [
    batchId: bigint,
    tokenType: bigint,
    quantity: bigint,
    issuanceDate: bigint,
    status: string,
    issuer: string,
    exists: boolean
  ] & {
    batchId: bigint;
    tokenType: bigint;
    quantity: bigint;
    issuanceDate: bigint;
    status: string;
    issuer: string;
    exists: boolean;
  };
}

export interface GHCTokenInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MINT_TOKEN"
      | "RETIRE_TOKEN"
      | "STATUS_ACTIVE"
      | "STATUS_PARTIAL"
      | "STATUS_RETIRED"
      | "TRANSFER_TOKEN"
      | "balanceOf"
      | "balanceOfBatch"
      | "batchCounter"
      | "batches"
      | "createBatch"
      | "getBatch"
      | "getBatchBalance"
      | "getBatchStatusString"
      | "getBatchTotalSupply"
      | "getUserBatches"
      | "isApprovedForAll"
      | "mintBatch"
      | "mintedSupply"
      | "name"
      | "owner"
      | "renounceOwnership"
      | "retireBatch"
      | "retiredSupply"
      | "safeBatchTransferFrom"
      | "safeTransferFrom"
      | "setApprovalForAll"
      | "setBaseURI"
      | "supportsInterface"
      | "symbol"
      | "totalSupply"
      | "transferBatch"
      | "transferOwnership"
      | "uri"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ApprovalForAll"
      | "BatchCreated"
      | "OwnershipTransferred"
      | "TokensMinted"
      | "TokensRetired"
      | "TokensTransferred"
      | "TransferBatch"
      | "TransferSingle"
      | "URI"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MINT_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RETIRE_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STATUS_ACTIVE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STATUS_PARTIAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STATUS_RETIRED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRANSFER_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batches",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createBatch",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBatch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBatchBalance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBatchStatusString",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBatchTotalSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserBatches",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintBatch",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintedSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retireBatch",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "retiredSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferBatch",
    values: [BigNumberish, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "MINT_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "RETIRE_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STATUS_ACTIVE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STATUS_PARTIAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STATUS_RETIRED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRANSFER_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batches", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBatchBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBatchStatusString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBatchTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserBatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintBatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintedSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retireBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retiredSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    account: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    account: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    account: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BatchCreatedEvent {
  export type InputTuple = [
    batchId: BigNumberish,
    tokenType: BigNumberish,
    quantity: BigNumberish,
    issuer: AddressLike
  ];
  export type OutputTuple = [
    batchId: bigint,
    tokenType: bigint,
    quantity: bigint,
    issuer: string
  ];
  export interface OutputObject {
    batchId: bigint;
    tokenType: bigint;
    quantity: bigint;
    issuer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensMintedEvent {
  export type InputTuple = [
    batchId: BigNumberish,
    quantity: BigNumberish,
    to: AddressLike
  ];
  export type OutputTuple = [batchId: bigint, quantity: bigint, to: string];
  export interface OutputObject {
    batchId: bigint;
    quantity: bigint;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensRetiredEvent {
  export type InputTuple = [
    batchId: BigNumberish,
    quantity: BigNumberish,
    from: AddressLike
  ];
  export type OutputTuple = [batchId: bigint, quantity: bigint, from: string];
  export interface OutputObject {
    batchId: bigint;
    quantity: bigint;
    from: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensTransferredEvent {
  export type InputTuple = [
    batchId: BigNumberish,
    quantity: BigNumberish,
    from: AddressLike,
    to: AddressLike
  ];
  export type OutputTuple = [
    batchId: bigint,
    quantity: bigint,
    from: string,
    to: string
  ];
  export interface OutputObject {
    batchId: bigint;
    quantity: bigint;
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferBatchEvent {
  export type InputTuple = [
    operator: AddressLike,
    from: AddressLike,
    to: AddressLike,
    ids: BigNumberish[],
    values: BigNumberish[]
  ];
  export type OutputTuple = [
    operator: string,
    from: string,
    to: string,
    ids: bigint[],
    values: bigint[]
  ];
  export interface OutputObject {
    operator: string;
    from: string;
    to: string;
    ids: bigint[];
    values: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferSingleEvent {
  export type InputTuple = [
    operator: AddressLike,
    from: AddressLike,
    to: AddressLike,
    id: BigNumberish,
    value: BigNumberish
  ];
  export type OutputTuple = [
    operator: string,
    from: string,
    to: string,
    id: bigint,
    value: bigint
  ];
  export interface OutputObject {
    operator: string;
    from: string;
    to: string;
    id: bigint;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace URIEvent {
  export type InputTuple = [value: string, id: BigNumberish];
  export type OutputTuple = [value: string, id: bigint];
  export interface OutputObject {
    value: string;
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GHCToken extends BaseContract {
  connect(runner?: ContractRunner | null): GHCToken;
  waitForDeployment(): Promise<this>;

  interface: GHCTokenInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MINT_TOKEN: TypedContractMethod<[], [bigint], "view">;

  RETIRE_TOKEN: TypedContractMethod<[], [bigint], "view">;

  STATUS_ACTIVE: TypedContractMethod<[], [string], "view">;

  STATUS_PARTIAL: TypedContractMethod<[], [string], "view">;

  STATUS_RETIRED: TypedContractMethod<[], [string], "view">;

  TRANSFER_TOKEN: TypedContractMethod<[], [bigint], "view">;

  balanceOf: TypedContractMethod<
    [account: AddressLike, id: BigNumberish],
    [bigint],
    "view"
  >;

  balanceOfBatch: TypedContractMethod<
    [accounts: AddressLike[], ids: BigNumberish[]],
    [bigint[]],
    "view"
  >;

  batchCounter: TypedContractMethod<[], [bigint], "view">;

  batches: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, string, string, boolean] & {
        batchId: bigint;
        tokenType: bigint;
        quantity: bigint;
        issuanceDate: bigint;
        status: string;
        issuer: string;
        exists: boolean;
      }
    ],
    "view"
  >;

  createBatch: TypedContractMethod<
    [_tokenType: BigNumberish, _quantity: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getBatch: TypedContractMethod<
    [_batchId: BigNumberish],
    [GHCToken.BatchStructOutput],
    "view"
  >;

  getBatchBalance: TypedContractMethod<
    [_user: AddressLike, _batchId: BigNumberish],
    [bigint],
    "view"
  >;

  getBatchStatusString: TypedContractMethod<
    [_batchId: BigNumberish],
    [string],
    "view"
  >;

  getBatchTotalSupply: TypedContractMethod<
    [_batchId: BigNumberish],
    [bigint],
    "view"
  >;

  getUserBatches: TypedContractMethod<[_user: AddressLike], [bigint[]], "view">;

  isApprovedForAll: TypedContractMethod<
    [account: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  mintBatch: TypedContractMethod<
    [_batchId: BigNumberish, _to: AddressLike, _quantity: BigNumberish],
    [void],
    "nonpayable"
  >;

  mintedSupply: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  retireBatch: TypedContractMethod<
    [_batchId: BigNumberish, _quantity: BigNumberish],
    [void],
    "nonpayable"
  >;

  retiredSupply: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  safeBatchTransferFrom: TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  safeTransferFrom: TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setBaseURI: TypedContractMethod<[_newBaseURI: string], [void], "nonpayable">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  transferBatch: TypedContractMethod<
    [
      _batchId: BigNumberish,
      _from: AddressLike,
      _to: AddressLike,
      _quantity: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  uri: TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MINT_TOKEN"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "RETIRE_TOKEN"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "STATUS_ACTIVE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "STATUS_PARTIAL"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "STATUS_RETIRED"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "TRANSFER_TOKEN"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<
    [account: AddressLike, id: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "balanceOfBatch"
  ): TypedContractMethod<
    [accounts: AddressLike[], ids: BigNumberish[]],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "batchCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "batches"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, string, string, boolean] & {
        batchId: bigint;
        tokenType: bigint;
        quantity: bigint;
        issuanceDate: bigint;
        status: string;
        issuer: string;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createBatch"
  ): TypedContractMethod<
    [_tokenType: BigNumberish, _quantity: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getBatch"
  ): TypedContractMethod<
    [_batchId: BigNumberish],
    [GHCToken.BatchStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBatchBalance"
  ): TypedContractMethod<
    [_user: AddressLike, _batchId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBatchStatusString"
  ): TypedContractMethod<[_batchId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getBatchTotalSupply"
  ): TypedContractMethod<[_batchId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserBatches"
  ): TypedContractMethod<[_user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [account: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "mintBatch"
  ): TypedContractMethod<
    [_batchId: BigNumberish, _to: AddressLike, _quantity: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintedSupply"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "retireBatch"
  ): TypedContractMethod<
    [_batchId: BigNumberish, _quantity: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "retiredSupply"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "safeBatchTransferFrom"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBaseURI"
  ): TypedContractMethod<[_newBaseURI: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferBatch"
  ): TypedContractMethod<
    [
      _batchId: BigNumberish,
      _from: AddressLike,
      _to: AddressLike,
      _quantity: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "uri"
  ): TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;

  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "BatchCreated"
  ): TypedContractEvent<
    BatchCreatedEvent.InputTuple,
    BatchCreatedEvent.OutputTuple,
    BatchCreatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TokensMinted"
  ): TypedContractEvent<
    TokensMintedEvent.InputTuple,
    TokensMintedEvent.OutputTuple,
    TokensMintedEvent.OutputObject
  >;
  getEvent(
    key: "TokensRetired"
  ): TypedContractEvent<
    TokensRetiredEvent.InputTuple,
    TokensRetiredEvent.OutputTuple,
    TokensRetiredEvent.OutputObject
  >;
  getEvent(
    key: "TokensTransferred"
  ): TypedContractEvent<
    TokensTransferredEvent.InputTuple,
    TokensTransferredEvent.OutputTuple,
    TokensTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TransferBatch"
  ): TypedContractEvent<
    TransferBatchEvent.InputTuple,
    TransferBatchEvent.OutputTuple,
    TransferBatchEvent.OutputObject
  >;
  getEvent(
    key: "TransferSingle"
  ): TypedContractEvent<
    TransferSingleEvent.InputTuple,
    TransferSingleEvent.OutputTuple,
    TransferSingleEvent.OutputObject
  >;
  getEvent(
    key: "URI"
  ): TypedContractEvent<
    URIEvent.InputTuple,
    URIEvent.OutputTuple,
    URIEvent.OutputObject
  >;

  filters: {
    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "BatchCreated(uint256,uint256,uint256,address)": TypedContractEvent<
      BatchCreatedEvent.InputTuple,
      BatchCreatedEvent.OutputTuple,
      BatchCreatedEvent.OutputObject
    >;
    BatchCreated: TypedContractEvent<
      BatchCreatedEvent.InputTuple,
      BatchCreatedEvent.OutputTuple,
      BatchCreatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TokensMinted(uint256,uint256,address)": TypedContractEvent<
      TokensMintedEvent.InputTuple,
      TokensMintedEvent.OutputTuple,
      TokensMintedEvent.OutputObject
    >;
    TokensMinted: TypedContractEvent<
      TokensMintedEvent.InputTuple,
      TokensMintedEvent.OutputTuple,
      TokensMintedEvent.OutputObject
    >;

    "TokensRetired(uint256,uint256,address)": TypedContractEvent<
      TokensRetiredEvent.InputTuple,
      TokensRetiredEvent.OutputTuple,
      TokensRetiredEvent.OutputObject
    >;
    TokensRetired: TypedContractEvent<
      TokensRetiredEvent.InputTuple,
      TokensRetiredEvent.OutputTuple,
      TokensRetiredEvent.OutputObject
    >;

    "TokensTransferred(uint256,uint256,address,address)": TypedContractEvent<
      TokensTransferredEvent.InputTuple,
      TokensTransferredEvent.OutputTuple,
      TokensTransferredEvent.OutputObject
    >;
    TokensTransferred: TypedContractEvent<
      TokensTransferredEvent.InputTuple,
      TokensTransferredEvent.OutputTuple,
      TokensTransferredEvent.OutputObject
    >;

    "TransferBatch(address,address,address,uint256[],uint256[])": TypedContractEvent<
      TransferBatchEvent.InputTuple,
      TransferBatchEvent.OutputTuple,
      TransferBatchEvent.OutputObject
    >;
    TransferBatch: TypedContractEvent<
      TransferBatchEvent.InputTuple,
      TransferBatchEvent.OutputTuple,
      TransferBatchEvent.OutputObject
    >;

    "TransferSingle(address,address,address,uint256,uint256)": TypedContractEvent<
      TransferSingleEvent.InputTuple,
      TransferSingleEvent.OutputTuple,
      TransferSingleEvent.OutputObject
    >;
    TransferSingle: TypedContractEvent<
      TransferSingleEvent.InputTuple,
      TransferSingleEvent.OutputTuple,
      TransferSingleEvent.OutputObject
    >;

    "URI(string,uint256)": TypedContractEvent<
      URIEvent.InputTuple,
      URIEvent.OutputTuple,
      URIEvent.OutputObject
    >;
    URI: TypedContractEvent<
      URIEvent.InputTuple,
      URIEvent.OutputTuple,
      URIEvent.OutputObject
    >;
  };
}
